plugins {
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '0.12-SNAPSHOT'
    //id 'org.spongepowered.mixin' version '0.8.5'
}

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
version = "${mod_version}${buildNumber != null ? ".${buildNumber}" : ""}+mc${minecraft_version}"
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "yarn", version: mapping_version

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {}
        server {}
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://modmaven.dev/' }
    maven { url 'https://maven.parchmentmc.org' }
    maven { url 'https://maven.quiltmc.org/repository/release' }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
    //maven { url 'https://jitpack.io' }
    maven { url 'https://plugins.gradle.org/' }
    maven { url 'https://maven.blamejared.com/' }

    maven {
        url = "https://api.modrinth.com/maven"
    }

    flatDir {
        dirs 'lib'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${mapping_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    // Dependencies translated to Fabric format
    modImplementation "com.simibubi.create:create-fabric-${minecraft_version}:${create_version}"
    implementation "org.joml:joml:1.10.5"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
    compileOnly "org.spongepowered:mixin:0.8.5:processor"
}

mixin {
}
    add sourceSets.main, 'createradar.refmap.json'
    config 'create_radar.mixins.json'


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            mod_id           : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors      : mod_authors, mod_description: mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : 'create_radar.mixins.json'
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}